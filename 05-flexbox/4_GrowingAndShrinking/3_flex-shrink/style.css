.flex-container {
  display: flex;
}

/* this selector selects all divs inside of .flex-container */
.flex-container div {
  background: peachpuff;
  border: 4px solid brown;
  height: 100px;
  width: 250px; /* for using flex-shrink:0, giving width value is imp */
  flex: 1 1 auto; /*  auto as a flex-basis tells the item to check for a width declaration */
}

.flex-container .two {
  flex-shrink: 0;
}

/* An important implication to notice here is that when you specify flex-grow or flex-shrink,
flex items do not necessarily respect your given values for width. In the above example,
all 3 divs are given a width of 250px, but when their parent is big enough, they grow to fill it.
Likewise, when the parent is too small, the default behavior is for them to shrink to fit.
This is not a bug, but it could be confusing behavior if you aren’t expecting it. */

/* We are just specifying that when something shrinks while some other thing doesn't, that other thing will maintain what width */
/* When we explicitly change something's flex-shrink to 0, that's when we require to specify a width. */

/* flex-basis sets the initial size of a flex item, so any sort
of flex-growing or flex-shrinking starts from that baseline size.

There is a difference between the default value of flex-basis and the way the flex 
shorthand defines it if no flex-basis is given. The actual default value for flex-basis is auto, 
but when you specify flex: 1 on an element, it interprets that as flex: 1 1 0. 
If you want to only adjust an item’s flex-grow you can do so directly, 
without the shorthand. Or you can be more verbose and use the full 3 value shorthand flex: 1 1 auto, 
which is also equivalent to using flex: auto. */

/* flex: auto is not the default value when using the flex shorthand despite
the name being “auto” which may be slightly confusing at first */

